
#numpy
import numpy as np
np.arange(10,51)


Out[10]:
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
       44, 45, 46, 47, 48, 49, 50])
In [11]:


np.eye(3)


Out[11]:
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
In [14]:


np.arange(1,101).reshape(10,10)/100


Out[14]:
array([[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ],
       [0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 ],
       [0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 ],
       [0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 ],
       [0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 ],
       [0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6 ],
       [0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7 ],
       [0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8 ],
       [0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9 ],
       [0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.  ]])
In [16]:


np.linspace(0,1,20)


Out[16]:
array([0.        , 0.05263158, 0.10526316, 0.15789474, 0.21052632,
       0.26315789, 0.31578947, 0.36842105, 0.42105263, 0.47368421,
       0.52631579, 0.57894737, 0.63157895, 0.68421053, 0.73684211,
       0.78947368, 0.84210526, 0.89473684, 0.94736842, 1.        ])
In [18]:


mat = np.arange(1,26).reshape(5,5)
mat


Out[18]:
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])
In [33]:


mat[:2,:2]


Out[33]:
array([[1, 2],
       [6, 7]])
In [34]:


mat


Out[34]:
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])
In [43]:


mat[3,4]


Out[43]:
20
In [46]:


mat[4]


Out[46]:
array([21, 22, 23, 24, 25])
In [50]:


mat[0:3][1:3]


Out[50]:
array([[ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15]])
In [51]:


mat.sum()


Out[51]:
325
In [52]:


mat.std()


Out[52]:
7.211102550927978
In [56]:


mat.sum(axis=0)


Out[56]:
array([55, 60, 65, 70, 75])
In [64]:


#panda -- remaing mathematical operation, build on the top of numpy
import pandas as pd
d = {'a':10,'b':20}
d.values()
​


Out[64]:
dict_values([10, 20])
In [70]:


arr= np.array([10,20,30])
lable=['a','b','c']
mylist=[10,20,30]
pd.Series(data=mylist,index=lable)


Out[70]:
a    10
b    20
c    30
dtype: int64
In [72]:


pd.Series(d,lable)


Out[72]:
a    10.0
b    20.0
c     NaN
dtype: float64
In [73]:


ser1=pd.Series([1,2,3],index=['a','b','c'])
ser1


Out[73]:
a    1
b    2
c    3
dtype: int64
In [74]:


ser1['a']


Out[74]:
1
In [78]:


ser2=pd.Series([1,2,3],index=['d','b','c'])
ser3 = ser1+ser2
ser3


Out[78]:
a    NaN
b    4.0
c    6.0
d    NaN
dtype: float64
In [87]:


#data frmes -- table
from numpy.random import randn
np.random.seed(101)
df = pd.DataFrame(randn(5,4),index='A B C D E'.split(),columns='W X Y Z'.split())
df


Out[87]:

W
X
Y
Z
A
2.706850
0.628133
0.907969
0.503826
B
0.651118
-0.319318
-0.848077
0.605965
C
-2.018168
0.740122
0.528813
-0.589001
D
0.188695
-0.758872
-0.933237
0.955057
E
0.190794
1.978757
2.605967
0.683509
In [90]:


df['W']


Out[90]:
A    2.706850
B    0.651118
C   -2.018168
D    0.188695
E    0.190794
Name: W, dtype: float64
In [91]:


df[['W','Z']]


Out[91]:

W
Z
A
2.706850
0.503826
B
0.651118
0.605965
C
-2.018168
-0.589001
D
0.188695
0.955057
E
0.190794
0.683509
In [92]:


df.W #SQL format


Out[92]:
A    2.706850
B    0.651118
C   -2.018168
D    0.188695
E    0.190794
Name: W, dtype: float64
In [93]:




#alter data frame
df['new'] = df['W'] + df['Y']
df


Out[93]:

W
X
Y
Z
new
A
2.706850
0.628133
0.907969
0.503826
3.614819
B
0.651118
-0.319318
-0.848077
0.605965
-0.196959
C
-2.018168
0.740122
0.528813
-0.589001
-1.489355
D
0.188695
-0.758872
-0.933237
0.955057
-0.744542
E
0.190794
1.978757
2.605967
0.683509
2.796762
In [98]:


df['asl'] = ((df['W']/100)*10)+df['W']
df


Out[98]:

W
X
Y
Z
new
asl
A
2.706850
0.628133
0.907969
0.503826
3.614819
2.977535
B
0.651118
-0.319318
-0.848077
0.605965
-0.196959
0.716230
C
-2.018168
0.740122
0.528813
-0.589001
-1.489355
-2.219985
D
0.188695
-0.758872
-0.933237
0.955057
-0.744542
0.207565
E
0.190794
1.978757
2.605967
0.683509
2.796762
0.209874
In [104]:


df.drop('new',axis=1)
#delete permanetly
df.drop('new',axis=1,inplace=True)



In [103]:


df


Out[103]:

W
X
Y
Z
new
asl
A
2.706850
0.628133
0.907969
0.503826
3.614819
2.977535
B
0.651118
-0.319318
-0.848077
0.605965
-0.196959
0.716230
C
-2.018168
0.740122
0.528813
-0.589001
-1.489355
-2.219985
D
0.188695
-0.758872
-0.933237
0.955057
-0.744542
0.207565
E
0.190794
1.978757
2.605967
0.683509
2.796762
0.209874
In [105]:


df


Out[105]:

W
X
Y
Z
asl
A
2.706850
0.628133
0.907969
0.503826
2.977535
B
0.651118
-0.319318
-0.848077
0.605965
0.716230
C
-2.018168
0.740122
0.528813
-0.589001
-2.219985
D
0.188695
-0.758872
-0.933237
0.955057
0.207565
E
0.190794
1.978757
2.605967
0.683509
0.209874
In [106]:


df.drop('E',axis=0)


Out[106]:

W
X
Y
Z
asl
A
2.706850
0.628133
0.907969
0.503826
2.977535
B
0.651118
-0.319318
-0.848077
0.605965
0.716230
C
-2.018168
0.740122
0.528813
-0.589001
-2.219985
D
0.188695
-0.758872
-0.933237
0.955057
0.207565
In [107]:


df.loc['A']


Out[107]:
W      2.706850
X      0.628133
Y      0.907969
Z      0.503826
asl    2.977535
Name: A, dtype: float64
In [109]:


df.loc[['A','B'],['W','Y']]


Out[109]:

W
Y
A
2.706850
0.907969
B
0.651118
-0.848077
In [110]:


#conditional data frme
df>0


Out[110]:

W
X
Y
Z
asl
A
True
True
True
True
True
B
True
False
False
True
True
C
False
True
True
False
False
D
True
False
False
True
True
E
True
True
True
True
True
In [111]:


df[df>0]


Out[111]:

W
X
Y
Z
asl
A
2.706850
0.628133
0.907969
0.503826
2.977535
B
0.651118
NaN
NaN
0.605965
0.716230
C
NaN
0.740122
0.528813
NaN
NaN
D
0.188695
NaN
NaN
0.955057
0.207565
E
0.190794
1.978757
2.605967
0.683509
0.209874
In [112]:


df[df['W']>0]


Out[112]:

W
X
Y
Z
asl
A
2.706850
0.628133
0.907969
0.503826
2.977535
B
0.651118
-0.319318
-0.848077
0.605965
0.716230
D
0.188695
-0.758872
-0.933237
0.955057
0.207565
E
0.190794
1.978757
2.605967
0.683509
0.209874
In [117]:


df[df['W']>0][['Y','X']]


Out[117]:

Y
X
A
0.907969
0.628133
B
-0.848077
-0.319318
D
-0.933237
-0.758872
E
2.605967
1.978757
In [122]:


df[(df['W']>0) & (df['Y'] > 1)]


Out[122]:

W
X
Y
Z
asl
E
0.190794
1.978757
2.605967
0.683509
0.209874
In [126]:


#new column adding
newcol = 'CA NY WY OR CO'.split()
df['States'] = newcol
df
​


Out[126]:

W
X
Y
Z
asl
States
A
2.706850
0.628133
0.907969
0.503826
2.977535
CA
B
0.651118
-0.319318
-0.848077
0.605965
0.716230
NY
C
-2.018168
0.740122
0.528813
-0.589001
-2.219985
WY
D
0.188695
-0.758872
-0.933237
0.955057
0.207565
OR
E
0.190794
1.978757
2.605967
0.683509
0.209874
CO
In [128]:


df.set_index('States')


Out[128]:

W
X
Y
Z
asl
States





CA
2.706850
0.628133
0.907969
0.503826
2.977535
NY
0.651118
-0.319318
-0.848077
0.605965
0.716230
WY
-2.018168
0.740122
0.528813
-0.589001
-2.219985
OR
0.188695
-0.758872
-0.933237
0.955057
0.207565
CO
0.190794
1.978757
2.605967
0.683509
0.209874
In [129]:


#multilable indexing
outside = ['G1','G1','G1','G2','G2','G2',]
inside = [1,2,3,1,2,3]
hire_index = list(zip(outside,inside))
hire_index = pd.MultiIndex.from_tuples(hire_index)
hire_index


Out[129]:
MultiIndex(levels=[['G1', 'G2'], [1, 2, 3]],
           labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])
In [132]:


df = pd.DataFrame(np.random.randn(6,2),index=hire_index,columns=['A','B'])
df


Out[132]:


A
B
G1
1
1.025984
-0.156598
2
-0.031579
0.649826
3
2.154846
-0.610259
G2
1
-0.755325
-0.346419
2
0.147027
-0.479448
3
0.558769
1.024810
In [137]:


df.loc['G1']


Out[137]:

A
B
1
1.025984
-0.156598
2
-0.031579
0.649826
3
2.154846
-0.610259
In [138]:


df.loc['G1'].loc[1]


Out[138]:
A    1.025984
B   -0.156598
Name: 1, dtype: float64
In [144]:


#groupby
data = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'],
       'Person':['Sam','Charlie','Amy','Vanesha','Carl','Sarah'],
       'Sales':[200,120,340,124,243,350]}
df = pd.DataFrame(data)
df


Out[144]:

Company
Person
Sales
0
GOOG
Sam
200
1
GOOG
Charlie
120
2
MSFT
Amy
340
3
MSFT
Vanesha
124
4
FB
Carl
243
5
FB
Sarah
350
In [145]:


df.groupby('Company')


Out[145]:
<pandas.core.groupby.groupby.DataFrameGroupBy object at 0x00000158A986BB00>
In [148]:


by_comp = df.groupby("Company")
by_comp.mean()


Out[148]:

Sales
Company

FB
296.5
GOOG
160.0
MSFT
232.0
In [149]:


by_comp.size()


Out[149]:
Company
FB      2
GOOG    2
MSFT    2
dtype: int64
In [150]:


by_comp.sum()


Out[150]:

Sales
Company

FB
593
GOOG
320
MSFT
464
In [151]:


by_comp.std()


Out[151]:

Sales
Company

FB
75.660426
GOOG
56.568542
MSFT
152.735065
In [152]:


by_comp.describe()


Out[152]:

Sales

count
mean
std
min
25%
50%
75%
max
Company








FB
2.0
296.5
75.660426
243.0
269.75
296.5
323.25
350.0
GOOG
2.0
160.0
56.568542
120.0
140.00
160.0
180.00
200.0
MSFT
2.0
232.0
152.735065
124.0
178.00
232.0
286.00
340.0
In [161]:


#merging,joining,concatination
df1 = pd.DataFrame({'A':['A0','A1','A2','A4'],
                  'B':['B0','B1','B2','B3'],
                  'C':['C0','C1','C2','C3']},
                   index = [0,1,2,3])
                
                   



In [165]:




df2= pd.DataFrame({'A':['A4','A5','A6','A7'],
                   'B':['B4','B5','B6','B7'],
                   'C':['C4','C5','C6','C7']},
                   index = [0,1,2,3])  



In [180]:


pd.merge(df1,df2,how='outer',on=['A'])


Out[180]:

A
B_x
C_x
B_y
C_y
0
A0
B0
C0
NaN
NaN
1
A1
B1
C1
NaN
NaN
2
A2
B2
C2
NaN
NaN
3
A4
B3
C3
B4
C4
4
A5
NaN
NaN
B5
C5
5
A6
NaN
NaN
B6
C6
6
A7
NaN
NaN
B7
C7
In [181]:


#csv input
df = pd.read_csv('Excel_Sample.xlsx')



---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-181-72f5f0fa650a> in <module>()
      1 #csv input
----> 2 df = pd.read_csv('Excel_Sample.xlsx')

C:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

C:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers.py in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

C:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers.py in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

C:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers.py in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

C:\ProgramData\Anaconda3\lib\site-packages\pandas\io\parsers.py in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader._setup_parser_source()

FileNotFoundError: File b'Excel_Sample.xlsx' does not exist

In [ ]:


​ 



In [1]:


import numpy as np
import pandas as pd
​



In [3]:


df = pd.read_csv('example')
df


Out[3]:

a
b
c
d
0
0
1
2
3
1
4
5
6
7
2
8
9
10
11
3
12
13
14
15
In [5]:


df = pd.read_excel('Excel_Sample.xlsx',sheet_name='Sheet1')
df


Out[5]:

a
b
c
d
0
0
1
2
3
1
4
5
6
7
2
8
9
10
11
3
12
13
14
15
In [6]:


df.to_csv('test')



In [7]:


df = pd.read_csv('u.user')
​
​


Out[7]:

1|24|M|technician|85711
0
2|53|F|other|94043
1
3|23|M|writer|32067
2
4|24|M|technician|43537
3
5|33|F|other|15213
4
6|42|M|executive|98101
5
7|57|M|administrator|91344
6
8|36|M|administrator|05201
7
9|29|M|student|01002
8
10|53|M|lawyer|90703
9
11|39|F|other|30329
10
12|28|F|other|06405
11
13|47|M|educator|29206
12
14|45|M|scientist|55106
13
15|49|F|educator|97301
14
16|21|M|entertainment|10309
15
17|30|M|programmer|06355
16
18|35|F|other|37212
17
19|40|M|librarian|02138
18
20|42|F|homemaker|95660
19
21|26|M|writer|30068
20
22|25|M|writer|40206
21
23|30|F|artist|48197
22
24|21|F|artist|94533
23
25|39|M|engineer|55107
24
26|49|M|engineer|21044
25
27|40|F|librarian|30030
26
28|32|M|writer|55369
27
29|41|M|programmer|94043
28
30|7|M|student|55436
29
31|24|M|artist|10003
...
...
912
914|44|F|other|08105
913
915|50|M|entertainment|60614
914
916|27|M|engineer|N2L5N
915
917|22|F|student|20006
916
918|40|M|scientist|70116
917
919|25|M|other|14216
918
920|30|F|artist|90008
919
921|20|F|student|98801
920
922|29|F|administrator|21114
921
923|21|M|student|E2E3R
922
924|29|M|other|11753
923
925|18|F|salesman|49036
924
926|49|M|entertainment|01701
925
927|23|M|programmer|55428
926
928|21|M|student|55408
927
929|44|M|scientist|53711
928
930|28|F|scientist|07310
929
931|60|M|educator|33556
930
932|58|M|educator|06437
931
933|28|M|student|48105
932
934|61|M|engineer|22902
933
935|42|M|doctor|66221
934
936|24|M|other|32789
935
937|48|M|educator|98072
936
938|38|F|technician|55038
937
939|26|F|student|33319
938
940|32|M|administrator|02215
939
941|20|M|student|97229
940
942|48|F|librarian|78209
941
943|22|M|student|77841
942 rows × 1 columns
In [ ]:


pd.DataFrame







